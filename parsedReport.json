[
  {
    "contract": {
      "name": "ProtocolEASResolver",
      "write": {
        "setAttesterWallet": {
          "effects": [
            "updates the attester wallet correctly"
          ],
          "permissions": [
            "allows authorized users",
            "denies unauthorized users"
          ],
          "validations": [
            "reverts when input is invalid"
          ],
          "events": []
        },
        "rolloverAttesterWallet": {
          "effects": [
            "updates the attester wallets correctly and sets the current attester as secondary attester"
          ],
          "permissions": [
            "allows authorized users",
            "denies unauthorized users"
          ],
          "validations": [
            "reverts when input is invalid"
          ],
          "events": []
        },
        "transferAdmin": {
          "effects": [
            "updates the admin correctly"
          ],
          "permissions": [
            "allows authorized users",
            "denies unauthorized users"
          ],
          "validations": [
            "reverts when input is invalid"
          ],
          "events": []
        },
        "onAttest": {
          "effects": [],
          "permissions": [],
          "validations": [
            "allows the attester wallet to attest",
            "prevents other wallets than the attester wallet from attesting"
          ],
          "events": []
        }
      }
    }
  },
  {
    "contract": {
      "name": "ScoutProtocolImplementation",
      "write": {
        "claim": {
          "effects": [
            "allows a user to claim tokens correctly"
          ],
          "permissions": [
            "reverts when the contract is paused"
          ],
          "validations": [
            "denies claims if user has already claimed",
            "reverts with invalid merkle proof",
            "reverts when merkle root is not set",
            "reverts when contract balance is insufficient"
          ],
          "events": []
        },
        "setMerkleRoot": {
          "effects": [
            "allows admin to set merkle root correctly"
          ],
          "permissions": [
            "reverts when the contract is paused",
            "reverts when not called by admin",
            "allows the claims manager to set the merkle root"
          ],
          "validations": [],
          "events": []
        }
      }
    }
  },
  {
    "contract": {
      "name": "ProtocolAccessControl",
      "write": {
        "transferAdmin": {
          "effects": [
            "allows admin to transfer admin"
          ],
          "permissions": [
            "reverts when not called by admin"
          ],
          "validations": [
            "reverts when setting to zero address"
          ],
          "events": []
        },
        "setRole": {
          "effects": [
            "sets a role to a new account"
          ],
          "permissions": [],
          "validations": [
            "reverts when setting to zero address"
          ],
          "events": [
            "emits a RoleTransferred event with roleName, previous and new holder if the new holder is different from the previous one"
          ]
        },
        "pause": {
          "effects": [
            "marks the contract as paused"
          ],
          "permissions": [
            "can be paused by the pauser role ",
            "reverts when called by non-pauser and non-admin"
          ],
          "validations": [],
          "events": [
            "emits Paused event when paused"
          ]
        },
        "unPause": {
          "effects": [
            "allows admin to unpause the contract"
          ],
          "permissions": [
            "reverts when called by non-admin"
          ],
          "validations": [],
          "events": [
            "emits Unpaused event when unpaused"
          ]
        },
        "testPaused": {
          "effects": [],
          "permissions": [],
          "validations": [],
          "events": []
        },
        "setPauser": {
          "effects": [
            "allows admin to set a new pauser"
          ],
          "permissions": [
            "reverts when not called by admin"
          ],
          "validations": [
            "reverts when setting to zero address"
          ],
          "events": [
            "emits a RoleTransferred event when pauser is changed"
          ]
        }
      }
    }
  },
  {
    "contract": {
      "name": "BuilderNFTSeason02Implementation",
      "write": {
        "registerBuilderToken()": {
          "effects": [
            "Register a new builder token using a builderId"
          ],
          "permissions": [
            "Normal users cannot register a builder token",
            "Minter can register a builder token"
          ],
          "validations": [
            "Revert if the builderId is already registered",
            "Revert if the builderId is empty",
            "Revert if the builderId is an invalid uuid"
          ],
          "events": [
            "Emits BuilderTokenRegistered event new tokenId and builderId"
          ]
        },
        "mint()": {
          "effects": [
            "Mints tokens to a user account",
            "Increments total supply of the token"
          ],
          "permissions": [
            "Allows any user to mint tokens if they pay the price"
          ],
          "validations": [
            "Reverts if tokenId is not registered"
          ],
          "events": [
            "Emits TransferSingle and BuilderScouted events on mint"
          ]
        },
        "burn()": {
          "effects": [
            "Burns tokens from a user account",
            "Decrements total supply of the token"
          ],
          "permissions": [
            "Allows token owner to burn tokens",
            "Allows approved operator to burn tokens",
            "Prevents burning tokens if not owner nor approved"
          ],
          "validations": [
            "Reverts if burning more tokens than balance"
          ],
          "events": [
            "Emits TransferSingle event on burn"
          ]
        },
        "setApprovalForAll()": {
          "effects": [
            "Sets operator approval for the caller"
          ],
          "permissions": [
            "Allows any user to set operator approval"
          ],
          "validations": [
            "Reverts if setting approval for self"
          ],
          "events": [
            "Emits ApprovalForAll event"
          ]
        },
        "safeTransferFrom()": {
          "effects": [
            "Transfers tokens from one account to another"
          ],
          "permissions": [
            "Allows token owner to transfer tokens",
            "Allows approved operator to transfer tokens",
            "Prevents transferring tokens if not owner nor approved"
          ],
          "validations": [
            "Reverts if caller is not owner nor approved",
            "Reverts if transferring more tokens than balance"
          ],
          "events": [
            "Emits TransferSingle event on transfer"
          ]
        },
        "safeBatchTransferFrom()": {
          "effects": [
            "Transfers multiple tokens from one account to another"
          ],
          "permissions": [
            "Allows token owner to transfer tokens",
            "Allows approved operator to transfer tokens",
            "Prevents transferring tokens if not owner nor approved"
          ],
          "validations": [
            "Reverts if transferring more tokens than balance"
          ],
          "events": [
            "Emits TransferBatch event on transfer"
          ]
        }
      }
    }
  }
]